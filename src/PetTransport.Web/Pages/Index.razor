@page "/"
@using PetTransport.Infrastructure.Data
@using PetTransport.Domain.Entities
@using PetTransport.Web.Extensions
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@using PetTransport.Domain.Entities.Enums
@inject ApplicationDbContext _context

<PageTitle>Index</PageTitle>

<h1>Сводка по заказам</h1>

Заказы ожидающие обработки: @pendingOrders
<br>
Заказы ожидающий оплаты: @notPaid
<br>
Заказы в работе: @inProgress
<br>
Завершенные заказы: @completed
<br>

<div class="container">
        <div class="row">
            <div class="col-sm-12 my-5">
 <RadzenChart>
                <RadzenPieSeries Data="@revenue" Title="Заказы по типу клиента" CategoryProperty="Quarter" ValueProperty="Revenue"/>
            </RadzenChart>
            </div>
        </div>
    </div>

<div class="container">
        <div class="row">
            <div class="col-sm-12 my-5">
<RadzenChart>
                    <RadzenColumnSeries Data="@ordersDiagram" CategoryProperty="Month" Title="Количество заказов" LineType="LineType.Dashed" ValueProperty="OrdersCount"/>
                    @* <RadzenColumnSeries Data="@revenue2019" CategoryProperty="Quarter" Title="2019" ValueProperty="Revenue"/> *@
                    <RadzenColumnOptions Radius="5"/>
                    <RadzenValueAxis>
                        <RadzenGridLines Visible="true"/>
                        <RadzenAxisTitle Text="Количество заказов"/>
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
    </div>

<div class="container">
        <div class="row">
            <div class="col-sm-12 my-5">
 <RadzenChart>
                    <RadzenColumnSeries Data="@ridesDiagram" CategoryProperty="Month" Title="Количество выполненных поездок" LineType="LineType.Dashed" ValueProperty="OrdersCount"/>
                    <RadzenColumnOptions Radius="5"/>
                    <RadzenValueAxis>
                        <RadzenGridLines Visible="true"/>
                        <RadzenAxisTitle Text="Количество выполненных поездок"/>
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
    </div>


<h1>Radzen Blazor Chart bar series</h1>
    <div class="container">
        <div class="row">
            
        </div>
    </div>


@code{
    
    int pendingOrders = 0;
    int notPaid = 0;
    int inProgress = 0;
    int completed = 0;
    DataItem[] revenue;
    OrderDiagram[] ordersDiagram;
    OrderDiagram[] ridesDiagram;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();

    // For demo purposes only
        pendingOrders = _context.Applications.Count(x => x.Status == ApplicationStatus.Pending);
        notPaid = _context.Applications.Count(x => x.Status == ApplicationStatus.NotPaid);
        inProgress =_context.Applications.Count(x => x.Status == ApplicationStatus.InProgress);
        completed =_context.Applications.Count(x => x.Status == ApplicationStatus.Completed);
        revenue = _context.Customers.GroupBy(x => x.CustomerType)
            .Select(x => new DataItem(x.Key.GetEnumDescription(), x.Count()))
            .ToArray();

        ordersDiagram=_context.Applications
            .Where(x => x.CreatedAt.Year == DateTime.Now.Year)
            .ToList().GroupBy(x=>x.CreatedAt.Month).Select(x => new OrderDiagram(CultureInfo.GetCultureInfo("ru-RU").DateTimeFormat.GetMonthName(x.Key), x.Count())).ToArray();
        
        ridesDiagram=_context.Rides
            .Where(x => x.CreatedAt.Year == DateTime.Now.Year && x.RideStatus == RideStatus.Completed)
            .ToList().GroupBy(x=>x.CreatedAt.Month).Select(x => new OrderDiagram(CultureInfo.GetCultureInfo("ru-RU").DateTimeFormat.GetMonthName(x.Key), x.Count())).ToArray();
    }
    
    
    class DataItem
    {
        public DataItem(string quarter, double revenue)
        {
            Quarter = quarter;
            Revenue = revenue;
        }
        
        public string Quarter { get; set; }
        public double Revenue { get; set; }
    }
    
    class OrderDiagram
    {
        public OrderDiagram(string month, int ordersCount)
        {
            Month = month;
            OrdersCount = ordersCount;
        }
        
        public string Month { get; set; }
        public double OrdersCount { get; set; }
    }


    void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {
    // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

    // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }
}

