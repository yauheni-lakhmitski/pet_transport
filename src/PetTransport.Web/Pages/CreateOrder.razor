@page "/create-order"

@using PetTransport.Domain.Entities
@using Microsoft.AspNetCore.Components
@using PetTransport.Infrastructure.Data
@using PetTransport.Web.Extensions
@using Task = System.Threading.Tasks.Task
@inject ApplicationDbContext dbContext
@inject DialogService DialogService

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

<h1>Создание заказа</h1>


<RadzenTemplateForm Data="@_application" Submit="@((Application args) => { Submit(args); })">
    <div class="row">
        <div class="col-md-6">
            <RadzenFieldset Text="Информация о заказе">
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Номер заказа" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" Name="OrderNumber" @bind-Value="_application.OrderNumber" Disabled="true" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Место отправления"/>
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" Name="SourcePoint" @bind-Value="_application.SourcePoint"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Место получения"/>
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" Name="DestinationPoint" @bind-Value="_application.DestinationPoint"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Дата отправки" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDatePicker style="width: 100%;" DateFormat="d"  Name="PickUpDate" @bind-Value="_application.PickUpDate" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Дата получения"/>
                    </div>
                    <div class="col-md-8">
                        <RadzenDatePicker style="width: 100%;" DateFormat="d"  Name="DeliveryDate" @bind-Value="_application.DeliveryDate"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Выбрать заказчика"/>
                    </div>
                    <div class="col-md-8">
                        <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary"style="margin-bottom: 10px;background-color: #34094a;" Text="Выбрать заказчика" Click="@ButtonClick" />

                    </div>
                </div>
            </RadzenFieldset>
        </div>
          <div class="col-md-6">
                    <RadzenFieldset Text="Информация о заказчике">
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Название организации" />
                            </div>
                            <div class="col-md-8">
                                <RadzenTextBox style="width: 100%;" Name="Name" Value="@customer?.Name" Disabled="true" />
                            </div>
                        </div>
                                    <div class="row">
                                                    <div class="col-md-4 align-items-center d-flex">
                                                        <RadzenLabel Text="Тип заказчика" />
                                                    </div>
                                                    <div class="col-md-8">
                                                        <RadzenTextBox style="width: 100%;" Name="Type" Value="@customer?.CustomerType.GetEnumDescription()" Disabled="true" />
                                                    </div>
                                                </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Адрес"/>
                            </div>
                            <div class="col-md-8">
                                <RadzenTextBox style="width: 100%;" Name="Address" Value="@customer?.Address" Disabled="true"/>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Email"/>
                            </div>
                            <div class="col-md-8">
                                <RadzenTextBox style="width: 100%;" Name="Email" Value="@customer?.Email" Disabled="true"/>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Номер телефона"/>
                            </div>
                            <div class="col-md-8">
                                <RadzenTextBox style="width: 100%;" Name="PhoneNumber" Value="@customer?.PhoneNumber" Disabled="true" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Контактное лицо"/>
                            </div>
                            <div class="col-md-8">
                                <RadzenTextBox style="width: 100%;" Name="ContactPerson" Value="@customer?.ContactPerson" Disabled="true" />
                            </div>
                        </div>
                    </RadzenFieldset>
                </div>
    </div>
</RadzenTemplateForm>
<RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary"style="margin-bottom: 10px;background-color: #34094a;" Text="Добавить животное в заказ" Click="@InsertRow" Disabled=@(applicationToInsert != null) />
<RadzenDataGrid @ref="applcationItemsGrid" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@applcationItems" TItem="ApplicationItem" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
    <Columns>
        <RadzenDataGridColumn TItem="ApplicationItem" Property="Id" Title="ID" Width="120px" >
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ApplicationItem" Property="AnimalType" Title="Тип животного">
            <EditTemplate Context="applcationItem">
                <RadzenTextBox @bind-Value="applcationItem.AnimalType" Style="width:100%; display: block" Name="AnimalType" />
                <RadzenRequiredValidator Text="Тип животного обязателен к заполнению" Component="AnimalType" Popup="true" />
            </EditTemplate>
            
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ApplicationItem" Property="AnimalName" Title="Наименование">
            <EditTemplate Context="applcationItem">
                <RadzenTextBox @bind-Value="applcationItem.AnimalName" Style="width:100%; display: block" Name="AnimalName"/>
                <RadzenRequiredValidator Text="Наименование животного обязательно к заполнению" Component="AnimalName" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ApplicationItem" Property="ChipNumber" Title="Номер чипа">
            <EditTemplate Context="applcationItem">
                <RadzenTextBox @bind-Value="applcationItem.ChipNumber" Style="width:100%; display: block" Name="ChipNumber"/>
                <RadzenRequiredValidator Text="Номер чипа обязателен к заполнению" Component="ChipNumber" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ApplicationItem" Context="sampleBlazorModelsSampleApplicationItem" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="200px">
            <Template Context="order">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="order">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(order))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(order))">
                </RadzenButton>
            </EditTemplate>
                                      <FooterTemplate>
                                                        Всего животных в заказе: <b>@applcationItemsGrid.Count</b>
                                                    </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ApplicationItem" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
            <Template Context="order">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(order))"  @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="order">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(order))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<br>
<hr/>
 <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="save" style="margin-bottom: 10px; width: 100%; background-color: #34094a;" Text="Создать заказ" Click="@SaveOrder" Disabled=@(applicationToInsert != null) />

@code {
    RadzenDataGrid<ApplicationItem> applcationItemsGrid;
    IList<ApplicationItem> applcationItems;
    Customer customer;

    Application _application = new Application()
    {
        OrderNumber = Guid.NewGuid().ToString("N"),
        PickUpDate = DateTime.Now,
        DeliveryDate = DateTime.Now
    };
    
 
    protected override void OnInitialized()
    {
        base.OnInitialized();


        // For demo purposes only
        applcationItems = new List<ApplicationItem>();

    // For production
    //applcationItems = dbContext.ApplicationItems.Include("Customer").Include("Employee");
    }

    async Task EditRow(ApplicationItem order)
    {
        await applcationItemsGrid.EditRow(order);
    }

    void OnUpdateRow(ApplicationItem order)
    {
        if (order == applicationToInsert)
        {
            applicationToInsert = null;
        }


    }

    async Task SaveRow(ApplicationItem order)
    {
        if (order == applicationToInsert)
          {
            applicationToInsert = null;
        }

        await applcationItemsGrid.UpdateRow(order);
    }

    void CancelEdit(ApplicationItem order)
    {
        if (order == applicationToInsert)
        {
            applicationToInsert = null;
        }

        applcationItemsGrid.CancelEditRow(order);

    }

    async Task DeleteRow(ApplicationItem order)
    {
        if (order == applicationToInsert)
        {
            applicationToInsert = null;
        }

        if (applcationItems.Contains(order))
        {

            // For demo purposes only
            applcationItems.Remove(order);


            await applcationItemsGrid.Reload();
        }
        else
        {
            applcationItemsGrid.CancelEditRow(order);
        }
    }

    ApplicationItem applicationToInsert;

    async Task InsertRow()
    {
        applicationToInsert = new ApplicationItem(){ Id = Guid.NewGuid()};
        await applcationItemsGrid.InsertRow(applicationToInsert);
    }
    
    
    async Task SaveOrder()
    {
        _application.Customer = customer;
        _application.AddItems(applcationItems);
        dbContext.Applications.Add(_application);
        await dbContext.SaveChangesAsync();

    // TODO: HANDLE
    }

    void OnCreateRow(ApplicationItem order)
    {
        applcationItems.Add(order);
    }
    
    void Submit(Application arg)
    {
   
    }
    
    async Task ButtonClick()
    {
        var res = await DialogService.OpenAsync<ChooseCustomerDialog>($"Добавить заказчика",
            new Dictionary<string, object>() {  },
            new DialogOptions() { Width = "700px", Height = "570px", Resizable = true, Draggable = true });

        var casting = res as List<Customer>;

        customer = casting.FirstOrDefault();
    }
}