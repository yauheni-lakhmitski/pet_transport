@page "/my-current-rides"

@attribute [Authorize(Roles = "Водитель")]
@using Microsoft.EntityFrameworkCore
@using PetTransport.Domain.Entities
@using PetTransport.Infrastructure.Data
@using Microsoft.AspNetCore.Components
@using Radzen.Blazor
@using Task = System.Threading.Tasks.Task
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject ApplicationDbContext dbContext
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<h1>Активная поездка</h1>

<RadzenDataGrid @ref="ridesGrid" AllowFiltering="true" FilterMode="FilterMode.Simple" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@rides" TItem="Ride" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
    <Columns>
        <RadzenDataGridColumn TItem="Ride" Property="Id" Title="Id" Width="120px"/>
                <RadzenDataGridColumn TItem="Ride" Property="Car" Title="Автомобиль">
                    <Template Context="ride">
                        @ride.Car.Make  @ride.Car.Model @ride.Car.RegistrationNumber
                    </Template>
                </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Ride" Property="Name" Title="Название поездки">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Ride" Property="From" Title="Откуда">
        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Ride" Property="To" Title="Куда">
                        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Ride" Property="Description" Title="Описание поездки">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Ride" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px" Title="Детали">
            <Template Context="order">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="announcement" Size="ButtonSize.Small" Class="m-1" Click="() => OnButtonClick(order.Id)" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<Ride> ridesGrid;
    List<Ride> rides;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userId = authstate.User.FindFirst(x=>x.Type== ClaimTypes.NameIdentifier);
        
        rides = dbContext.Rides
            .Include(x=>x.User)
            .Include(x=>x.Car)
            .Where(x=>x.UserId == userId.Value && x.RideStatus == RideStatus.InProgress)
            .ToList();
    }

    async Task EditRow(Ride transportation)
    {
        await ridesGrid.EditRow(transportation);
    }

    void OnUpdateRow(Ride transportation)
    {
        if (transportation == rideToInsert)
        {
            rideToInsert = null;
        }

        dbContext.Update(transportation);


        dbContext.SaveChanges();
    }

    async Task SaveRow(Ride transportation)
    {
        if (transportation == rideToInsert)
        {
            rideToInsert = null;
        }

        await ridesGrid.UpdateRow(transportation);
    }

    void CancelEdit(Ride transportation)
    {
        if (transportation == rideToInsert)
        {
            rideToInsert = null;
        }

        ridesGrid.CancelEditRow(transportation);

    // For production
        var orderEntry = dbContext.Entry(transportation);
        if (orderEntry.State == EntityState.Modified)
        {
            orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
            orderEntry.State = EntityState.Unchanged;
        }
    }

    async Task DeleteRow(Ride transportation)
    {
        if (transportation == rideToInsert)
        {
            rideToInsert = null;
        }

        if (rides.Contains(transportation))
        {
            dbContext.Remove<Ride>(transportation);

    // For demo purposes only
            rides.Remove(transportation);

    // For production
    //dbContext.SaveChanges();

            await ridesGrid.Reload();
        }
        else
        {
            ridesGrid.CancelEditRow(transportation);
        }
    }

    Ride rideToInsert;

    async Task InsertRow()
    {
        rideToInsert = new Ride();
        await ridesGrid.InsertRow(rideToInsert);
    }

    void OnCreateRow(Ride transportation)
    {
        dbContext.Add(transportation);

        dbContext.SaveChanges();
    }

    private void CreateNew()
    {
        NavigationManager.NavigateTo("create-ride");
    }

    private void OnButtonClick(Guid orderId)
    {
        NavigationManager.NavigateTo($"ride-info/{orderId}");
    }

}