@page "/customers"

@using Microsoft.EntityFrameworkCore
@using PetTransport.Domain.Entities
@using PetTransport.Infrastructure.Data
@using Microsoft.AspNetCore.Components
@using PetTransport.Web.Extensions
@using PetTransport.Web.Models
@using Syncfusion.Licensing
@using Task = System.Threading.Tasks.Task

@inject ApplicationDbContext dbContext

<h1>Панель управления заказчиками</h1>

    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Добавить нового заказчика" Click="@InsertRow" Disabled=@(customerToInsert != null) />
    <RadzenDataGrid @ref="customersGrid" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@customers" TItem="Customer" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
        <Columns>
            <RadzenDataGridColumn TItem="Customer" Property="Id" Title="Order ID" Width="120px" />
            <RadzenDataGridColumn TItem="Customer" Property="Name" Title="Название">
                <EditTemplate Context="customer">
                    <RadzenTextBox @bind-Value="customer.Name" Style="width:100%; display: block" Name="Name" />
                    <RadzenRequiredValidator Text="Название обязательно к заполнению" Component="Name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Customer" Property="Address" Title="Адрес">
                <EditTemplate Context="customer">
                    <RadzenTextBox @bind-Value="customer.Address" Style="width:100%; display: block" Name="Address"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Customer" Property="Email" Title="Emaail">
                <EditTemplate Context="customer">
                    <RadzenTextBox @bind-Value="customer.Email" Style="width:100%; display: block" Name="Email"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Customer" Property="OrganizationNumber" Title="УНП">
                <EditTemplate Context="customer">
                    <RadzenTextBox @bind-Value="customer.OrganizationNumber" Style="width:100%; display: block" Name="OrganizationNumber"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Customer" Property="PhoneNumber" Title="Номер телефона">
                <EditTemplate Context="customer">
                    <RadzenTextBox @bind-Value="customer.PhoneNumber" Style="width:100%; display: block" Name="PhoneNumber"/>
                    <RadzenRequiredValidator Text="Номер обязателен к заполнению" Component="PhoneNumber" Popup="true"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Customer" Property="ContactPerson" Title="Контактное лицо">
                <EditTemplate Context="customer">
                    <RadzenTextBox @bind-Value="customer.ContactPerson" Style="width:100%; display: block" Name="ContantPerson"/>
                </EditTemplate>
            </RadzenDataGridColumn>        
            <RadzenDataGridColumn TItem="Customer" Property="CustomerType" Title="Тип заказчика">
                <Template Context="customer">
                    @customer.CustomerType.GetEnumDescription()
                </Template>
                <EditTemplate Context="customer">
                    <RadzenDropDown @bind-Value=@customer.CustomerType
                                    Data=@myValues TextProperty="Name" ValueProperty="Id">
                    </RadzenDropDown>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Customer" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                <Template Context="order">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="order">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(order))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(order))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Customer" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                <Template Context="order">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(order))"  @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="order">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(order))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

@code {
    RadzenDataGrid<Customer> customersGrid;
    IList<Customer> customers;

    
    List<CommonCustomerTypeViewModel> myValues;

    
    
    protected override void OnInitialized()
    {
        base.OnInitialized();

        myValues = ((CustomerType[])Enum.GetValues(typeof(CustomerType))).Select(c => new CommonCustomerTypeViewModel(c, c.GetEnumDescription())).ToList();

        // For demo purposes only
        customers = dbContext.Customers.ToList();
    }

    async Task EditRow(Customer customer)
    {
        await customersGrid.EditRow(customer);
    }

    void OnUpdateRow(Customer customer)
    {
        if (customer == customerToInsert)
        {
            customerToInsert = null;
        }

        dbContext.Update(customer);


        dbContext.SaveChanges();
    }

    async Task SaveRow(Customer customer)
    {
        if (customer == customerToInsert)
        {
            customerToInsert = null;
        }

        await customersGrid.UpdateRow(customer);
    }

    void CancelEdit(Customer customer)
    {
        if (customer == customerToInsert)
        {
            customerToInsert = null;
        }

        customersGrid.CancelEditRow(customer);

        // For production
        var orderEntry = dbContext.Entry(customer);
        if (orderEntry.State == EntityState.Modified)
        {
            orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
            orderEntry.State = EntityState.Unchanged;
        }
    }

    async Task DeleteRow(Customer customer)
    {
        if (customer == customerToInsert)
        {
            customerToInsert = null;
        }

        if (customers.Contains(customer))
        {
            dbContext.Remove<Customer>(customer);

            // For demo purposes only
            customers.Remove(customer);

            // For production
            //dbContext.SaveChanges();

            await customersGrid.Reload();
        }
        else
        {
            customersGrid.CancelEditRow(customer);
        }
    }

    Customer customerToInsert;

    async Task InsertRow()
    {
        customerToInsert = new Customer() { Id = Guid.NewGuid(), CustomerType = CustomerType.IndividualEntrepreneur};
        await customersGrid.InsertRow(customerToInsert);
    }

    void OnCreateRow(Customer customer)
    {
        dbContext.Add(customer);

        dbContext.SaveChanges();
    }
}