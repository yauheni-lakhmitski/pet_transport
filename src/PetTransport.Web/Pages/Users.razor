@page "/users"

@using Microsoft.EntityFrameworkCore
@using PetTransport.Domain.Entities
@using PetTransport.Infrastructure.Data
@using Microsoft.AspNetCore.Components
@using Task = System.Threading.Tasks.Task
@using System.Linq
@using Microsoft.AspNetCore.Identity

@inject RoleManager<IdentityRole> _roleManager;
@inject UserManager<User> _userManager;
@inject ApplicationDbContext dbContext

<h1>Пользователи</h1>
    <RadzenDataGrid @ref="usersGrid" AllowFiltering="true" AllowPaging="true" AllowColumnResize="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@users" TItem="User" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" FilterMode="FilterMode.Simple">
        <Columns>
            <RadzenDataGridColumn TItem="User" Property="Id" Title="Код" Width="120px" />
            <RadzenDataGridColumn TItem="User" Property="Make" Title="Фото" Sortable="false" Filterable="false">
                <Template Context="user">
                    @{
                        var userImage = $"/img/{user.ImageUrl}";
                    
                        <RadzenImage Style="height: 100px; width: 100px;" Path="@userImage"/>
                        }
                </Template>
                        </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="User" Property="FirstName" Title="Имя">
                <EditTemplate Context="user">
                    <RadzenTextBox @bind-Value="user.FirstName" Style="width:100%; display: block" Name="Name" />
                    <RadzenRequiredValidator Text="Имя обязательно к заполнению" Component="Name" Popup="false" />
                </EditTemplate>
            </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="User" Property="PatronymicName" Title="Отчество">
                            <EditTemplate Context="user">
                                <RadzenTextBox @bind-Value="user.PatronymicName" Style="width:100%; display: block" Name="PatronymicName" />
                                <RadzenRequiredValidator Text="Отчество обязательно к заполнению" Component="PatronymicName" Popup="false" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="User" Property="LastName" Title="Фамилия">
                <EditTemplate Context="user">
                    <RadzenTextBox @bind-Value="user.LastName" Style="width:100%; display: block" Name="Model"/>
                    <RadzenRequiredValidator Text="Фамилия обязательна к заполнению" Component="Model" Popup="false"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="User" Property="Email" Title="Email">
                <EditTemplate Context="user">
                    <RadzenTextBox @bind-Value="user.Email" Style="width:100%; display: block" Name="Email"/>
                    <RadzenRequiredValidator Text="Email обязателен к заполнению" Component="Model" Popup="false"/>
                </EditTemplate>
            </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="User" Property="DriverLicence" Title="Вод. удостоверение">
                            <EditTemplate Context="user">
                                <RadzenTextBox @bind-Value="user.DriverLicence" Style="width:100%; display: block" Name="DriverLicence"/>
                            </EditTemplate>
                        </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="User" Property="Role" Title="Роль" Filterable="false" Sortable="false">
                <Template Context="user">
                    @_userManager.GetRolesAsync(user).Result.FirstOrDefault()
                </Template>
                <EditTemplate Context="user">
                    <RadzenDropDown AllowClear="false" TValue="string" Class="w-100" TextProperty="Name" ValueProperty="Name" @bind-Value="selectedRole"
                                    Data=_roleManager.Roles.ToList() SelectedItem="@_userManager.GetRolesAsync(user).Result.FirstOrDefault()"
                                    Change=@(args => OnChange(args, user)) />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="User" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" >
                <Template Context="user">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(user))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="user">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(user))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(user))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="User" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                <Template Context="user">
                    @if (user.IsBlocked == false)
                    {
                        <span style="color:green; cursor: pointer;" @onclick="()=>Block(user)" class="oi oi-check" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span style="color: red; cursor: pointer;" @onclick="()=>Unblock(user)" class="oi oi oi-circle-x" aria-hidden="true"></span>
                    }
                    
                </Template>

            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

@code {
    RadzenDataGrid<User> usersGrid;
    IList<User> users;
    IList<IdentityRole> roles;

    string? selectedRole = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
    // For demo purposes only
        roles = _roleManager.Roles.ToList();
        users = dbContext.Users.ToList();
        selectedRole = roles.FirstOrDefault().Name;
    }

    async Task EditRow(User user)
    {
        selectedRole = _userManager.GetRolesAsync(user).Result.FirstOrDefault();
        await usersGrid.EditRow(user);
    }

    async Task OnUpdateRow(User user)
    {
        if (user == userToInsert)
        {
            userToInsert = null;
        }
        var roles = await _userManager.GetRolesAsync(user);
        await _userManager.RemoveFromRolesAsync(user, roles);
        await _userManager.AddToRoleAsync(user, selectedRole);

        dbContext.Update(user);


        dbContext.SaveChanges();
    }

    async Task SaveRow(User user)
    {
        if (user == userToInsert)
        {
            userToInsert = null;
        }

        await usersGrid.UpdateRow(user);
    }

    void CancelEdit(User user)
    {
        if (user == userToInsert)
        {
            userToInsert = null;
        }

        usersGrid.CancelEditRow(user);

        // For production
        var orderEntry = dbContext.Entry(user);
        if (orderEntry.State == EntityState.Modified)
        {
            orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
            orderEntry.State = EntityState.Unchanged;
        }
    }

    async Task Unblock(User user)
    {
        
        user.IsBlocked = false;
        dbContext.Update(user);
        await dbContext.SaveChangesAsync();
        await usersGrid.UpdateRow(user);
    }
    
    async Task Block(User user)
    {
        user.IsBlocked = true;
        dbContext.Update(user);
        await dbContext.SaveChangesAsync();
        await usersGrid.UpdateRow(user);
    }

    User userToInsert;

    async Task InsertRow()
    {
        userToInsert = new User();
        await usersGrid.InsertRow(userToInsert);
    }

    void OnCreateRow(User car)
    {
        dbContext.Add(car);

        dbContext.SaveChanges();
    }

    private void OnChange(object args, User value)
    {
        selectedRole = (string)args;
    }

}