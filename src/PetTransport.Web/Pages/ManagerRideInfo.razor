@page "/managa-ride-info/{RideId}"
@inject DialogService DialogService
@using PetTransport.Domain.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using PetTransport.Infrastructure.Data
@using PetTransport.Web.Extensions
@using PetTransport.Web.Models
@using Task = System.Threading.Tasks.Task
@using System.Security.Claims
@using System.Linq
@using System.Linq.Dynamic.Core
@using PetTransport.Domain.Entities.Enums
@inject ApplicationDbContext dbContext
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NotificationService NotificationService
@inject LinkGenerator LinkGenerator
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;
@using PetTransport.Web.Chat

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

<h1>Информация о поездке</h1>
<RadzenTemplateForm Data="@_ride" Submit="@((Ride args) => { Submit(args); })">
    <div class="row">
        <div class="col-md-6">
            <RadzenFieldset Text="Информация о поездке">
                @* <div class="row"> *@
                @*     <div class="col-md-4 align-items-center d-flex"> *@
                @*         <RadzenLabel Text="Номер поездки" /> *@
                @*     </div> *@
                @*     <div class="col-md-8"> *@
                @*         <RadzenTextBox style="width: 100%;" Name="RideId" @bind-Value="_ride.Id" Disabled="true" /> *@
                @*     </div> *@
                @* </div> *@
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Место отправки"/>
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" Name="SourcePoint" @bind-Value="_ride.From"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Место прибытия"/>
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" Name="DestinationPoint" @bind-Value="_ride.To"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Название поездки" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" DateFormat="d"  Name="RideName" @bind-Value="_ride.Name" />
                    </div>
                </div>
                <div class="row">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Описание поездки"/>
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenTextBox style="width: 100%;" Name="Description" @bind-Value="_ride.Description"/>
                                    </div>
                                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Дата отправления"/>
                    </div>
                    <div class="col-md-8">
                                                             <RadzenDatePicker style="width: 100%;" Name="ArrivalDate" @bind-Value="_ride.DepartureDate" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10"  DateFormat="MM/dd/yyyy HH:mm" Class="w-100"/>

                    </div>
                </div>
                              <div class="row">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Дата прибытия"/>
                                    </div>
                                  <div class="col-md-8">
                                      <RadzenDatePicker  style="width: 100%;" Name="ArrivalDate" @bind-Value="_ride.ArrivalDate" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10"  DateFormat="MM/dd/yyyy HH:mm" Class="w-100"/>
                                  </div>
                                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Водитель"/>
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown @bind-Value="_ride.UserId"  AllowClear="true" TValue="string" AllowVirtualization="true" Class="w-100"
                                        AllowFiltering="true" Data=@users.Select(x => new CommonViewModel() {Id = x.Id, Name = $"{x.FirstName} {x.LastName}"}) TextProperty="Name" ValueProperty="Id"
                                        Change=@(args => OnChange(args, "DropDown with virtualization")) />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Автомобиль"/>
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown @bind-Value="_ride.CarId" AllowClear="true" TValue="Guid" AllowVirtualization="true" Class="w-100"
                                        AllowFiltering="true" Data=@cars.Select(x => new CommonGuidViewModel() {Id = x.Id, Name = $"{x.Make} {x.Model} {x.RegistrationNumber}"}) TextProperty="Name" ValueProperty="Id"
                                        Change=@(args => OnChange(args, "DropDown with virtualization")) />
                    </div>
                </div>
                            
            </RadzenFieldset>
            
        </div>
        <div class="col-md-6">
             <div class="chat">
                 <div class="chat__window">
                     <div class="chat__title">Чат</div>
                     <ul class="chat__messages list-reset" id="chatmessa2">
                         @foreach (var item in _messages)
                         {
                             <li class="messages messages-old">
                                 <div class="message-people">
                                     <div class="message-avatar">
                                         <img src="/img/medium_male_default.png" alt="">
                                     </div>
                                 </div>
                                 <div class="chat__info">
                                     <div class="message-name">@item.Username</div>
                                     <div class="text__message">@item.Body</div>
                                     <div class="text-time"> @DateTime.Now</div>
                                 </div>
                             </li>
                         }
                         <!-- } -->
                         <li class="messages" id="discussion">
                    
                         </li>
                     </ul>
                     <div class="bottom_wrapper">
                         <input class="message-input" type="text" id="message" placeholder="Введите соощение..." @bind="@_newMessage" />
                         <input style="background-color: #34094a;" class="btn btn-primary" type="button" id="sendmessage" @onclick="@(() => SendAsync(_newMessage))" value="Отправить" />
                     </div>
                 </div>
                 </div>
        </div>
    </div>
</RadzenTemplateForm>

@if (_applications.Any())
{
    
    <RadzenDataGrid @ref="applicationsGrid" AllowFiltering="true" AllowPaging="true" PageSize="25" AllowSorting="true" Responsive="true"
                    Data="@_applications" TItem="Application">
        <Template Context="application">
                <RadzenDataGrid AllowFiltering="true" LogicalFilterOperator="LogicalFilterOperator.Or" AllowPaging="true" AllowSorting="true" Data="@application.OrderItems" TItem="ApplicationItem">
                    <Columns>
                        <RadzenDataGridColumn TItem="ApplicationItem" Property="Id" Title="Код" />
                        <RadzenDataGridColumn TItem="ApplicationItem" Property="AnimalType.Name" Title="Вид животного">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ApplicationItem" Property="AnimalName" Title="Название животного" />
                        <RadzenDataGridColumn TItem="ApplicationItem" Property="ChipNumber" Title="Номер чипа" />
                    </Columns>
                </RadzenDataGrid>
            </Template>
        <Columns>
            <RadzenDataGridColumn TItem="Application" Property="OrderNumber" Title="Номер заказа"/>
            @* <RadzenDataGridColumn TItem="Application" Property="Employee.LastName" Title="Employee" Width="200px" > *@
            @*     <Template Context="application"> *@
            @*         <RadzenImage Path="@application.Employee?.Photo" style="width: 32px; height: 32px; bapplication-radius: 16px; margin-right: 6px;" /> *@
            @*         @application.Employee?.FirstName @application.Employee?.LastName *@
            @*     </Template> *@
            @* </RadzenDataGridColumn> *@
            <RadzenDataGridColumn TItem="Application" Property="Status" Title="Статус заказа">
                <Template Context="application">
                    @application.Status.GetEnumDescription()
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Application" Property="CreatedAt" Title="Дата создания" FormatString="{0:d}"/>
            <RadzenDataGridColumn TItem="Application" Property="SourcePoint" Title="Место отправления"/>
            <RadzenDataGridColumn TItem="Application" Property="DestinationPoint" Title="Место получения"/>
            <RadzenDataGridColumn TItem="Application" Title="Количество животных">
                <Template Context="application">
                    @application.OrderItems.Count
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Application" Context="application" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                <Template Context="application">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="done" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(application))" @onclick:stopPropagation="true" Disabled="_ride.RideStatus == RideStatus.Completed">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Application" Context="application" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                                        <Template Context="application">
                                                  <a href="@LinkGenerator.GetPathByAction("GetTtn", "Word", new {id = application.Id})">
                                                            <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="assignment_returned" href=@{$"/word/getttn?id={@application.Id}"} />
                                                        </a>
                                        </Template>
                                    </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    @* *@
    @* *@
    @* *@
    @* <hr/> *@
    @* @if (_ride.RideStatus != RideStatus.Completed) *@
    @* { *@
    @*     @if (!dbContext.Rides.Any(x => x.UserId == UserId && x.RideStatus == RideStatus.InProgress)) *@
    @*     { *@
    @*         <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="save" style="margin-bottom: 10px; width: 100%; background-color: #34094a;" Text="Взять в работу" Click="@OnClickTakeInProgress"/> *@
    @*     } *@
    @* *@
    @*     @if (dbContext.Rides.Any(x => x.UserId == UserId && x.Id == _ride.Id && x.RideStatus == RideStatus.InProgress)) *@
    @*     { *@
    @*         <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="save" style="margin-bottom: 10px; width: 100%; background-color: #34094a;" Text="Завершить поездку" Click="@SaveRide"/> *@
    @*     } *@
    @* } *@
}



@code {
    
    
    [Parameter]
    public string RideId { get; set; }
    
    RadzenDataGrid<Application> applicationsGrid;
    
    
    string value = string.Empty;
    
    Ride _ride = new Ride()
    {
        Id = Guid.NewGuid(),
         UpdatedAt = DateTime.Now,
        CreatedAt = DateTime.Now,
        ArrivalDate = DateTime.Now,
        DepartureDate = DateTime.Now
    };

    List<Application> _applications;
    List<User> users;
    List<Car> cars;
    
       private List<Message> _messages = new List<Message>();
        // flag to indicate chat status
        private bool _isChatting = false;
    
        // name of the user who will be chatting
        private string _username;
    
        // on-screen message
        private string _message;
    
        // new message input
        private string _newMessage;
    
        // list of messages in chat
    
        private string _hubUrl;
        private HubConnection _hubConnection;
    
    public string UserId { get; set; }

    void Submit(Ride arg)
    {
   
    }

    protected override async void OnInitialized()
    {
        await base.OnInitializedAsync();
        _applications = new List<Application>();

        users = dbContext.Users.ToList();
        cars = dbContext.Cars.ToList();
        _ride = await dbContext.Rides
            .Include(x => x.Messages)
            .ThenInclude(x => x.User)
            .Include(x => x.Applications)
            .ThenInclude(x => x.OrderItems)
            .ThenInclude(x => x.AnimalType)
            .FirstOrDefaultAsync(x => x.Id == Guid.Parse(RideId));
        _applications = _ride.Applications;

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        UserId = authstate.User.FindFirst(x => x.Type == ClaimTypes.NameIdentifier).Value;
        _username = authstate.User.FindFirst(x=>x.Type== ClaimTypes.Name).Value;

        _messages = _ride.
            Messages
            .OrderBy(x=>x.CreatedAt)
            .Select(x => new Message($"{x.User.FirstName} {x.User.LastName}", x.Text, x.User.Id == UserId)).ToList();
                
                try
                {
            // Start chatting and force refresh UI.
                    _isChatting = true;
                    await Task.Delay(1);
                
            // remove old messages if any
                
            // Create the chat client
                    string baseUrl = navigationManager.BaseUri;
                
                    _hubUrl = baseUrl.TrimEnd('/') + BlazorChatSampleHub.HubUrl;
                
                    _hubConnection = new HubConnectionBuilder()
                        .WithUrl(_hubUrl, options =>
                
                        {
                                    
                            options.WebSocketConfiguration = conf =>
                            {
                                conf.RemoteCertificateValidationCallback = (message, cert, chain, errors) => { return true; };
                            };
                            options.HttpMessageHandlerFactory = factory => new HttpClientHandler
                            {
                                ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => { return true; }
                            };
                        })
                        .Build();
                
                    _hubConnection.On<string, string, string, string>("Broadcast", BroadcastMessage);
                
                    await _hubConnection.StartAsync();
                }
                catch (Exception e)
                {
                    _message = $"ERROR: Failed to start chat client: {e.Message}";
                    _isChatting = false;
                }
    }
    
    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

    }
    
    async Task DeleteRow(Application application)
    {
        application.Status = ApplicationStatus.Completed;

        dbContext.Update(application);
        await dbContext.SaveChangesAsync();

            await applicationsGrid.Reload();
        
    }
    
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
    
        private void BroadcastMessage(string username, string name, string message, string rideId)
        {
            if (Guid.Parse(rideId) != _ride.Id)
            {
                return;
            }
            bool isMine = username.Equals(_username);
    
            _messages.Add(new Message(name, message, isMine));
    
        // Inform blazor the UI needs updating
            StateHasChanged();
        }
    
        private async Task SendAsync(string message)
        {
            if (!string.IsNullOrWhiteSpace(message))
            {
                await _hubConnection.SendAsync("Send", _username, _ride.Id, message);
    
                _newMessage = string.Empty;
            }
        }
    
    public class Message
            {
                public Message(string username, string body, bool mine)
                {
                    Username = username;
                    Body = body;
                    Mine = mine;
                }
        
                public string Username { get; set; }
                public string Body { get; set; }
                public bool Mine { get; set; }
        
                public bool IsNotice => Body.StartsWith("[Notice]");
        
                public string CSS => Mine ? "sent" : "received";
            }
}