@page "/ride-calendar"

@using Microsoft.EntityFrameworkCore
@using PetTransport.Infrastructure.Data
@using Microsoft.AspNetCore.Components
@using System.Globalization

@inject ApplicationDbContext dbContext
@inject NavigationManager NavigationManager

<h1>Календарь поездок</h1>
<RadzenScheduler @ref=@scheduler
                 SlotRender=@OnSlotRender
                 AppointmentRender="@OnAppointmentRender"
                 style="height: 768px;" 
                 TItem="Appointment"
                 Data=@appointments
                 AppointmentSelect=@(args => OnAppointmentSelect(args))
                 StartProperty="Start"
                 EndProperty="End" 
                 Culture="@CultureInfo.GetCultureInfo("ru-RU")"
                 TextProperty="Text" SelectedIndex="2">
        <RadzenDayView />
        <RadzenWeekView />
        <RadzenMonthView />
    </RadzenScheduler>

@code{
    RadzenScheduler<Appointment> scheduler;
    
    int pendingOrders = 0;
    int notPaid = 0;
    int inProgress = 0;
    int completed = 0;
    DataItem[] revenue;
    List<Appointment> appointments;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        appointments = dbContext.Rides
            .Include(x=>x.User)
            .Include(x=>x.Car)
            .Select(x=> new Appointment(x.DepartureDate, x.ArrivalDate, $"Водитель: {x.User.FirstName} {x.User.LastName} ({x.Car.Make} {x.Car.Model} {x.Car.RegistrationNumber})", x.Id)).ToList();
    }
    
    
    class DataItem
    {
        public DataItem(string quarter, double revenue)
        {
            Quarter = quarter;
            Revenue = revenue;
        }
        
        public string Quarter { get; set; }
        public double Revenue { get; set; }
    }

    public class Appointment
    {

        public Appointment(DateTime start, DateTime end, string text, Guid rideId)
        {
            Start = start;
            End = end;
            Text = text;
            RideId = rideId;
        }

        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public Guid RideId { get; set; }
        public string Text { get; set; }
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {
    // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

    // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
      
    }

    private void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> arg)
    {
        arg.Attributes["style"] = "height:200%;";
    }


    private void OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        NavigationManager.NavigateTo($"ride-info/{args.Data.RideId}");
    }

}


