@page "/ride-info/{RideId}"
@inject DialogService DialogService
@using PetTransport.Domain.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using PetTransport.Infrastructure.Data
@using PetTransport.Web.Extensions
@using PetTransport.Web.Models
@using Task = System.Threading.Tasks.Task
@using System.Security.Claims
@using System.Linq
@using System.Linq.Dynamic.Core
@inject ApplicationDbContext dbContext
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NotificationService NotificationService

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

<h1>Информация о поездке</h1>
<RadzenTemplateForm Data="@_ride" Submit="@((Ride args) => { Submit(args); })">
    <div class="row">
        <div class="col-md-6">
            <RadzenFieldset Text="Информация о поездке">
                @* <div class="row"> *@
                @*     <div class="col-md-4 align-items-center d-flex"> *@
                @*         <RadzenLabel Text="Номер поездки" /> *@
                @*     </div> *@
                @*     <div class="col-md-8"> *@
                @*         <RadzenTextBox style="width: 100%;" Name="RideId" @bind-Value="_ride.Id" Disabled="true" /> *@
                @*     </div> *@
                @* </div> *@
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Место отправки"/>
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" Name="SourcePoint" @bind-Value="_ride.From"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Место прибытия"/>
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" Name="DestinationPoint" @bind-Value="_ride.To"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Название поездки" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" DateFormat="d"  Name="RideName" @bind-Value="_ride.Name" />
                    </div>
                </div>
                <div class="row">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Описание поездки"/>
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenTextBox style="width: 100%;" Name="Description" @bind-Value="_ride.Description"/>
                                    </div>
                                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Дата отправления"/>
                    </div>
                    <div class="col-md-8">
                                                             <RadzenDatePicker style="width: 100%;" Name="ArrivalDate" @bind-Value="_ride.DepartureDate" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10"  DateFormat="MM/dd/yyyy HH:mm" Class="w-100"/>

                    </div>
                </div>
                              <div class="row">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Дата прибытия"/>
                                    </div>
                                  <div class="col-md-8">
                                      <RadzenDatePicker  style="width: 100%;" Name="ArrivalDate" @bind-Value="_ride.ArrivalDate" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10"  DateFormat="MM/dd/yyyy HH:mm" Class="w-100"/>
                                  </div>
                                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Водитель"/>
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown @bind-Value="_ride.UserId"  AllowClear="true" TValue="string" AllowVirtualization="true" Class="w-100"
                                        AllowFiltering="true" Data=@users.Select(x => new CommonViewModel() {Id = x.Id, Name = $"{x.FirstName} {x.LastName}"}) TextProperty="Name" ValueProperty="Id"
                                        Change=@(args => OnChange(args, "DropDown with virtualization")) />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Автомобиль"/>
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown @bind-Value="_ride.CarId" AllowClear="true" TValue="Guid" AllowVirtualization="true" Class="w-100"
                                        AllowFiltering="true" Data=@cars.Select(x => new CommonGuidViewModel() {Id = x.Id, Name = $"{x.Make} {x.Model} {x.RegistrationNumber}"}) TextProperty="Name" ValueProperty="Id"
                                        Change=@(args => OnChange(args, "DropDown with virtualization")) />
                    </div>
                </div>
                            
            </RadzenFieldset>
            
        </div>
        <div class="col-md-6"></div>
    </div>
</RadzenTemplateForm>

@if (_applications.Any())
{
    
    <RadzenDataGrid @ref="applicationsGrid" AllowFiltering="true" AllowPaging="true" PageSize="25" AllowSorting="true"
                    Data="@_applications" TItem="Application">
        <Template Context="application">
                <RadzenDataGrid AllowFiltering="true" LogicalFilterOperator="LogicalFilterOperator.Or" AllowPaging="true" AllowSorting="true" Data="@application.OrderItems" TItem="ApplicationItem">
                    <Columns>
                        <RadzenDataGridColumn TItem="ApplicationItem" Property="Id" Title="Id" />
                        <RadzenDataGridColumn TItem="ApplicationItem" Property="AnimalType.Name" Title="Тип животного">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ApplicationItem" Property="AnimalName" Title="Название животного" />
                        <RadzenDataGridColumn TItem="ApplicationItem" Property="ChipNumber" Title="Номер чипа" />
                    </Columns>
                </RadzenDataGrid>
            </Template>
        <Columns>
            <RadzenDataGridColumn TItem="Application" Property="OrderNumber" Title="Номер заказа"/>
            @* <RadzenDataGridColumn TItem="Application" Property="Employee.LastName" Title="Employee" Width="200px" > *@
            @*     <Template Context="application"> *@
            @*         <RadzenImage Path="@application.Employee?.Photo" style="width: 32px; height: 32px; bapplication-radius: 16px; margin-right: 6px;" /> *@
            @*         @application.Employee?.FirstName @application.Employee?.LastName *@
            @*     </Template> *@
            @* </RadzenDataGridColumn> *@
            <RadzenDataGridColumn TItem="Application" Property="Status" Title="Статус заказа">
                <Template Context="application">
                    @application.Status.GetEnumDescription()
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Application" Property="PickUpDate" Title="Дата отправки" FormatString="{0:d}"/>
            <RadzenDataGridColumn TItem="Application" Property="DeliveryDate" Title="Дата получения" FormatString="{0:d}"/>
            <RadzenDataGridColumn TItem="Application" Property="SourcePoint" Title="Место отправления"/>
            <RadzenDataGridColumn TItem="Application" Property="DestinationPoint" Title="Место получения"/>
            <RadzenDataGridColumn TItem="Application" Title="Количество животных">
                <Template Context="application">
                    @application.OrderItems.Count
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Application" Context="application" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                <Template Context="application">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="done" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(application))" @onclick:stopPropagation="true" Disabled="_ride.RideStatus == RideStatus.Completed">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    
    
    
    <hr/>
    @if (_ride.RideStatus != RideStatus.Completed)
    {
        @if (!dbContext.Rides.Any(x => x.UserId == UserId && x.RideStatus == RideStatus.InProgress))
        {
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="save" style="margin-bottom: 10px; width: 100%; background-color: #34094a;" Text="Взять в работу" Click="@OnClickTakeInProgress"/>
        }
    
        @if (dbContext.Rides.Any(x => x.UserId == UserId && x.Id == _ride.Id && x.RideStatus == RideStatus.InProgress))
        {
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="save" style="margin-bottom: 10px; width: 100%; background-color: #34094a;" Text="Завершить поездку" Click="@SaveRide"/>
        }
    }
}



@code {
    
    
    [Parameter]
    public string RideId { get; set; }
    
    RadzenDataGrid<Application> applicationsGrid;
    
    
    string value = string.Empty;
    
    Ride _ride = new Ride()
    {
        Id = Guid.NewGuid(),
         UpdatedAt = DateTime.Now,
        CreatedAt = DateTime.Now,
        ArrivalDate = DateTime.Now,
        DepartureDate = DateTime.Now
    };

    List<Application> _applications;
    List<User> users;
    List<Car> cars;
    public string UserId { get; set; }

    void Submit(Ride arg)
    {
   
    }
    
    protected override async void OnInitialized()
    {
        
        await base.OnInitializedAsync();
        _applications = new List<Application>();

    users = dbContext.Users.ToList();
        cars = dbContext.Cars.ToList();
        _ride = await dbContext.Rides
            .Include(x=>x.Applications)
            .ThenInclude(x=>x.OrderItems)
            .ThenInclude(x=>x.AnimalType)
            .FirstOrDefaultAsync(x => x.Id == Guid.Parse(RideId));
        _applications = _ride.Applications;
        
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        UserId = authstate.User.FindFirst(x=>x.Type== ClaimTypes.NameIdentifier).Value;
    }
    
    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

    }
    
    public async Task OpenOrder()
    {
        var res = await DialogService.OpenAsync<DialogCardPage>($"Добавить заказ в поездку",
            new Dictionary<string, object>() { {"SelectedApplications",_applications} },
            new DialogOptions() { Width = "700px", Height = "570px", Resizable = true, Draggable = true });

        var result = res as List<Application>;
        _applications = res ?? new List<Application>();
    }
    
    async Task SaveRide()
    {
        foreach (var application in _applications)
        {
            application.Status = ApplicationStatus.Completed;
        }
        
        _ride.AddApplications(_applications);
        
        await DialogService.OpenAsync<FinishRideDialog>("Завершить текущую поездку",
            new Dictionary<string, object>() { {"Ride", _ride} },
            new DialogOptions() { Width = "700px", Height = "570px", Resizable = true, Draggable = true });
        

    // TODO: HANDLE
    }    
    
    async Task OnClickTakeInProgress()
    {
        if (dbContext.Rides.Any(x=>x.RideStatus == RideStatus.InProgress && x.UserId == UserId))
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ошибка", Detail = "У вас есть активные поездки", Duration = 4000 });
        }
        
        
        _ride.RideStatus = RideStatus.InProgress;

        foreach (var application in _ride.Applications)
        {
            application.Status = ApplicationStatus.InProgress;
        }
        
        dbContext.Update(_ride);
        await dbContext.SaveChangesAsync();
    }
    
    async Task DeleteRow(Application application)
    {
        application.Status = ApplicationStatus.Completed;

        dbContext.Update(application);
        await dbContext.SaveChangesAsync();

            await applicationsGrid.Reload();
        
    }
    
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}